// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package leetcode_client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type ProblemDifficulty string

const (
	ProblemDifficultyEasy   ProblemDifficulty = "Easy"
	ProblemDifficultyMedium ProblemDifficulty = "Medium"
	ProblemDifficultyHard   ProblemDifficulty = "Hard"
)

var AllProblemDifficulty = []ProblemDifficulty{
	ProblemDifficultyEasy,
	ProblemDifficultyMedium,
	ProblemDifficultyHard,
}

// __getProblemInput is used internally by genqlient
type __getProblemInput struct {
	TitleSlug string `json:"titleSlug"`
}

// GetTitleSlug returns __getProblemInput.TitleSlug, and is useful for accessing the field via an interface.
func (v *__getProblemInput) GetTitleSlug() string { return v.TitleSlug }

// getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge includes the requested fields of the GraphQL type ActiveDailyCodingChallenge.
type getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge struct {
	Date     string                                                                                                   `json:"date"`
	Link     string                                                                                                   `json:"link"`
	Question getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem `json:"question"`
}

// GetDate returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge.Date, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge) GetDate() string {
	return v.Date
}

// GetLink returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge.Link, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge) GetLink() string {
	return v.Link
}

// GetQuestion returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge.Question, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge) GetQuestion() getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem {
	return v.Question
}

// getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem includes the requested fields of the GraphQL type Problem.
type getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem struct {
	QuestionId string            `json:"questionId"`
	Title      string            `json:"title"`
	TitleSlug  string            `json:"titleSlug"`
	Difficulty ProblemDifficulty `json:"difficulty"`
}

// GetQuestionId returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.QuestionId, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetQuestionId() string {
	return v.QuestionId
}

// GetTitle returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.Title, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetTitle() string {
	return v.Title
}

// GetTitleSlug returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.TitleSlug, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetTitleSlug() string {
	return v.TitleSlug
}

// GetDifficulty returns getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.Difficulty, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetDifficulty() ProblemDifficulty {
	return v.Difficulty
}

// getActiveDailyCodingChallengeResponse is returned by getActiveDailyCodingChallenge on success.
type getActiveDailyCodingChallengeResponse struct {
	ActiveDailyCodingChallengeQuestion getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge `json:"activeDailyCodingChallengeQuestion"`
}

// GetActiveDailyCodingChallengeQuestion returns getActiveDailyCodingChallengeResponse.ActiveDailyCodingChallengeQuestion, and is useful for accessing the field via an interface.
func (v *getActiveDailyCodingChallengeResponse) GetActiveDailyCodingChallengeQuestion() getActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge {
	return v.ActiveDailyCodingChallengeQuestion
}

// getProblemQuestionProblem includes the requested fields of the GraphQL type Problem.
type getProblemQuestionProblem struct {
	QuestionId         string                                             `json:"questionId"`
	QuestionFrontendId string                                             `json:"questionFrontendId"`
	BoundTopicId       string                                             `json:"boundTopicId"`
	Title              string                                             `json:"title"`
	TitleSlug          string                                             `json:"titleSlug"`
	Content            string                                             `json:"content"`
	TranslatedTitle    string                                             `json:"translatedTitle"`
	TranslatedContent  string                                             `json:"translatedContent"`
	IsPaidOnly         bool                                               `json:"isPaidOnly"`
	Difficulty         ProblemDifficulty                                  `json:"difficulty"`
	Likes              int                                                `json:"likes"`
	Dislikes           int                                                `json:"dislikes"`
	IsLiked            bool                                               `json:"isLiked"`
	SimilarQuestions   string                                             `json:"similarQuestions"`
	ExampleTestcases   string                                             `json:"exampleTestcases"`
	Contributors       []getProblemQuestionProblemContributorsContributor `json:"contributors"`
	TopicTags          []getProblemQuestionProblemTopicTagsTopicTag       `json:"topicTags"`
	CompanyTagStats    string                                             `json:"companyTagStats"`
	CodeSnippets       []getProblemQuestionProblemCodeSnippetsCodeSnippet `json:"codeSnippets"`
	Stats              string                                             `json:"stats"`
	Hints              []string                                           `json:"hints"`
	Solution           getProblemQuestionProblemSolutionOfficialSolution  `json:"solution"`
	Status             string                                             `json:"status"`
	SampleTestCase     string                                             `json:"sampleTestCase"`
	MetaData           string                                             `json:"metaData"`
	JudgerAvailable    bool                                               `json:"judgerAvailable"`
	JudgeType          string                                             `json:"judgeType"`
	MysqlSchemas       []string                                           `json:"mysqlSchemas"`
	EnableRunCode      bool                                               `json:"enableRunCode"`
	EnableTestMode     bool                                               `json:"enableTestMode"`
	EnableDebugger     bool                                               `json:"enableDebugger"`
	EnvInfo            string                                             `json:"envInfo"`
	LibraryUrl         string                                             `json:"libraryUrl"`
	AdminUrl           string                                             `json:"adminUrl"`
	ChallengeQuestion  getProblemQuestionProblemChallengeQuestion         `json:"challengeQuestion"`
	Note               string                                             `json:"note"`
}

// GetQuestionId returns getProblemQuestionProblem.QuestionId, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetQuestionId() string { return v.QuestionId }

// GetQuestionFrontendId returns getProblemQuestionProblem.QuestionFrontendId, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetQuestionFrontendId() string { return v.QuestionFrontendId }

// GetBoundTopicId returns getProblemQuestionProblem.BoundTopicId, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetBoundTopicId() string { return v.BoundTopicId }

// GetTitle returns getProblemQuestionProblem.Title, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetTitle() string { return v.Title }

// GetTitleSlug returns getProblemQuestionProblem.TitleSlug, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetTitleSlug() string { return v.TitleSlug }

// GetContent returns getProblemQuestionProblem.Content, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetContent() string { return v.Content }

// GetTranslatedTitle returns getProblemQuestionProblem.TranslatedTitle, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetTranslatedTitle() string { return v.TranslatedTitle }

// GetTranslatedContent returns getProblemQuestionProblem.TranslatedContent, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetTranslatedContent() string { return v.TranslatedContent }

// GetIsPaidOnly returns getProblemQuestionProblem.IsPaidOnly, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetIsPaidOnly() bool { return v.IsPaidOnly }

// GetDifficulty returns getProblemQuestionProblem.Difficulty, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetDifficulty() ProblemDifficulty { return v.Difficulty }

// GetLikes returns getProblemQuestionProblem.Likes, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetLikes() int { return v.Likes }

// GetDislikes returns getProblemQuestionProblem.Dislikes, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetDislikes() int { return v.Dislikes }

// GetIsLiked returns getProblemQuestionProblem.IsLiked, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetIsLiked() bool { return v.IsLiked }

// GetSimilarQuestions returns getProblemQuestionProblem.SimilarQuestions, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetSimilarQuestions() string { return v.SimilarQuestions }

// GetExampleTestcases returns getProblemQuestionProblem.ExampleTestcases, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetExampleTestcases() string { return v.ExampleTestcases }

// GetContributors returns getProblemQuestionProblem.Contributors, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetContributors() []getProblemQuestionProblemContributorsContributor {
	return v.Contributors
}

// GetTopicTags returns getProblemQuestionProblem.TopicTags, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetTopicTags() []getProblemQuestionProblemTopicTagsTopicTag {
	return v.TopicTags
}

// GetCompanyTagStats returns getProblemQuestionProblem.CompanyTagStats, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetCompanyTagStats() string { return v.CompanyTagStats }

// GetCodeSnippets returns getProblemQuestionProblem.CodeSnippets, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetCodeSnippets() []getProblemQuestionProblemCodeSnippetsCodeSnippet {
	return v.CodeSnippets
}

// GetStats returns getProblemQuestionProblem.Stats, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetStats() string { return v.Stats }

// GetHints returns getProblemQuestionProblem.Hints, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetHints() []string { return v.Hints }

// GetSolution returns getProblemQuestionProblem.Solution, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetSolution() getProblemQuestionProblemSolutionOfficialSolution {
	return v.Solution
}

// GetStatus returns getProblemQuestionProblem.Status, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetStatus() string { return v.Status }

// GetSampleTestCase returns getProblemQuestionProblem.SampleTestCase, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetSampleTestCase() string { return v.SampleTestCase }

// GetMetaData returns getProblemQuestionProblem.MetaData, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetMetaData() string { return v.MetaData }

// GetJudgerAvailable returns getProblemQuestionProblem.JudgerAvailable, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetJudgerAvailable() bool { return v.JudgerAvailable }

// GetJudgeType returns getProblemQuestionProblem.JudgeType, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetJudgeType() string { return v.JudgeType }

// GetMysqlSchemas returns getProblemQuestionProblem.MysqlSchemas, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetMysqlSchemas() []string { return v.MysqlSchemas }

// GetEnableRunCode returns getProblemQuestionProblem.EnableRunCode, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetEnableRunCode() bool { return v.EnableRunCode }

// GetEnableTestMode returns getProblemQuestionProblem.EnableTestMode, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetEnableTestMode() bool { return v.EnableTestMode }

// GetEnableDebugger returns getProblemQuestionProblem.EnableDebugger, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetEnableDebugger() bool { return v.EnableDebugger }

// GetEnvInfo returns getProblemQuestionProblem.EnvInfo, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetEnvInfo() string { return v.EnvInfo }

// GetLibraryUrl returns getProblemQuestionProblem.LibraryUrl, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetLibraryUrl() string { return v.LibraryUrl }

// GetAdminUrl returns getProblemQuestionProblem.AdminUrl, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetAdminUrl() string { return v.AdminUrl }

// GetChallengeQuestion returns getProblemQuestionProblem.ChallengeQuestion, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetChallengeQuestion() getProblemQuestionProblemChallengeQuestion {
	return v.ChallengeQuestion
}

// GetNote returns getProblemQuestionProblem.Note, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblem) GetNote() string { return v.Note }

// getProblemQuestionProblemChallengeQuestion includes the requested fields of the GraphQL type ChallengeQuestion.
type getProblemQuestionProblemChallengeQuestion struct {
	Id                       string `json:"id"`
	Date                     string `json:"date"`
	IncompleteChallengeCount int    `json:"incompleteChallengeCount"`
	StreakCount              int    `json:"streakCount"`
	Type                     string `json:"type"`
}

// GetId returns getProblemQuestionProblemChallengeQuestion.Id, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemChallengeQuestion) GetId() string { return v.Id }

// GetDate returns getProblemQuestionProblemChallengeQuestion.Date, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemChallengeQuestion) GetDate() string { return v.Date }

// GetIncompleteChallengeCount returns getProblemQuestionProblemChallengeQuestion.IncompleteChallengeCount, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemChallengeQuestion) GetIncompleteChallengeCount() int {
	return v.IncompleteChallengeCount
}

// GetStreakCount returns getProblemQuestionProblemChallengeQuestion.StreakCount, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemChallengeQuestion) GetStreakCount() int { return v.StreakCount }

// GetType returns getProblemQuestionProblemChallengeQuestion.Type, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemChallengeQuestion) GetType() string { return v.Type }

// getProblemQuestionProblemCodeSnippetsCodeSnippet includes the requested fields of the GraphQL type CodeSnippet.
type getProblemQuestionProblemCodeSnippetsCodeSnippet struct {
	Lang     string `json:"lang"`
	LangSlug string `json:"langSlug"`
	Code     string `json:"code"`
}

// GetLang returns getProblemQuestionProblemCodeSnippetsCodeSnippet.Lang, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemCodeSnippetsCodeSnippet) GetLang() string { return v.Lang }

// GetLangSlug returns getProblemQuestionProblemCodeSnippetsCodeSnippet.LangSlug, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemCodeSnippetsCodeSnippet) GetLangSlug() string { return v.LangSlug }

// GetCode returns getProblemQuestionProblemCodeSnippetsCodeSnippet.Code, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemCodeSnippetsCodeSnippet) GetCode() string { return v.Code }

// getProblemQuestionProblemContributorsContributor includes the requested fields of the GraphQL type Contributor.
type getProblemQuestionProblemContributorsContributor struct {
	Username   string `json:"username"`
	ProfileUrl string `json:"profileUrl"`
	AvatarUrl  string `json:"avatarUrl"`
}

// GetUsername returns getProblemQuestionProblemContributorsContributor.Username, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemContributorsContributor) GetUsername() string { return v.Username }

// GetProfileUrl returns getProblemQuestionProblemContributorsContributor.ProfileUrl, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemContributorsContributor) GetProfileUrl() string {
	return v.ProfileUrl
}

// GetAvatarUrl returns getProblemQuestionProblemContributorsContributor.AvatarUrl, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemContributorsContributor) GetAvatarUrl() string { return v.AvatarUrl }

// getProblemQuestionProblemSolutionOfficialSolution includes the requested fields of the GraphQL type OfficialSolution.
type getProblemQuestionProblemSolutionOfficialSolution struct {
	Id               string `json:"id"`
	CanSeeDetail     bool   `json:"canSeeDetail"`
	PaidOnly         bool   `json:"paidOnly"`
	HasVideoSolution bool   `json:"hasVideoSolution"`
	PaidOnlyVideo    bool   `json:"paidOnlyVideo"`
}

// GetId returns getProblemQuestionProblemSolutionOfficialSolution.Id, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemSolutionOfficialSolution) GetId() string { return v.Id }

// GetCanSeeDetail returns getProblemQuestionProblemSolutionOfficialSolution.CanSeeDetail, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemSolutionOfficialSolution) GetCanSeeDetail() bool {
	return v.CanSeeDetail
}

// GetPaidOnly returns getProblemQuestionProblemSolutionOfficialSolution.PaidOnly, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemSolutionOfficialSolution) GetPaidOnly() bool { return v.PaidOnly }

// GetHasVideoSolution returns getProblemQuestionProblemSolutionOfficialSolution.HasVideoSolution, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemSolutionOfficialSolution) GetHasVideoSolution() bool {
	return v.HasVideoSolution
}

// GetPaidOnlyVideo returns getProblemQuestionProblemSolutionOfficialSolution.PaidOnlyVideo, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemSolutionOfficialSolution) GetPaidOnlyVideo() bool {
	return v.PaidOnlyVideo
}

// getProblemQuestionProblemTopicTagsTopicTag includes the requested fields of the GraphQL type TopicTag.
type getProblemQuestionProblemTopicTagsTopicTag struct {
	Name           string `json:"name"`
	Slug           string `json:"slug"`
	TranslatedName string `json:"translatedName"`
}

// GetName returns getProblemQuestionProblemTopicTagsTopicTag.Name, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemTopicTagsTopicTag) GetName() string { return v.Name }

// GetSlug returns getProblemQuestionProblemTopicTagsTopicTag.Slug, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemTopicTagsTopicTag) GetSlug() string { return v.Slug }

// GetTranslatedName returns getProblemQuestionProblemTopicTagsTopicTag.TranslatedName, and is useful for accessing the field via an interface.
func (v *getProblemQuestionProblemTopicTagsTopicTag) GetTranslatedName() string {
	return v.TranslatedName
}

// getProblemResponse is returned by getProblem on success.
type getProblemResponse struct {
	Question getProblemQuestionProblem `json:"question"`
}

// GetQuestion returns getProblemResponse.Question, and is useful for accessing the field via an interface.
func (v *getProblemResponse) GetQuestion() getProblemQuestionProblem { return v.Question }

// The query executed by getActiveDailyCodingChallenge.
const getActiveDailyCodingChallenge_Operation = `
query getActiveDailyCodingChallenge {
	activeDailyCodingChallengeQuestion {
		date
		link
		question {
			questionId
			title
			titleSlug
			difficulty
		}
	}
}
`

func getActiveDailyCodingChallenge(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *getActiveDailyCodingChallengeResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getActiveDailyCodingChallenge",
		Query:  getActiveDailyCodingChallenge_Operation,
	}

	data_ = &getActiveDailyCodingChallengeResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by getProblem.
const getProblem_Operation = `
query getProblem ($titleSlug: String!) {
	question(titleSlug: $titleSlug) {
		questionId
		questionFrontendId
		boundTopicId
		title
		titleSlug
		content
		translatedTitle
		translatedContent
		isPaidOnly
		difficulty
		likes
		dislikes
		isLiked
		similarQuestions
		exampleTestcases
		contributors {
			username
			profileUrl
			avatarUrl
		}
		topicTags {
			name
			slug
			translatedName
		}
		companyTagStats
		codeSnippets {
			lang
			langSlug
			code
		}
		stats
		hints
		solution {
			id
			canSeeDetail
			paidOnly
			hasVideoSolution
			paidOnlyVideo
		}
		status
		sampleTestCase
		metaData
		judgerAvailable
		judgeType
		mysqlSchemas
		enableRunCode
		enableTestMode
		enableDebugger
		envInfo
		libraryUrl
		adminUrl
		challengeQuestion {
			id
			date
			incompleteChallengeCount
			streakCount
			type
		}
		note
	}
}
`

func getProblem(
	ctx_ context.Context,
	client_ graphql.Client,
	titleSlug string,
) (data_ *getProblemResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "getProblem",
		Query:  getProblem_Operation,
		Variables: &__getProblemInput{
			TitleSlug: titleSlug,
		},
	}

	data_ = &getProblemResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
