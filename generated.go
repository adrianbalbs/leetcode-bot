// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge includes the requested fields of the GraphQL type ActiveDailyCodingChallenge.
type GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge struct {
	Date     string                                                                                                   `json:"date"`
	Link     string                                                                                                   `json:"link"`
	Question GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem `json:"question"`
}

// GetDate returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge.Date, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge) GetDate() string {
	return v.Date
}

// GetLink returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge.Link, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge) GetLink() string {
	return v.Link
}

// GetQuestion returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge.Question, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge) GetQuestion() GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem {
	return v.Question
}

// GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem includes the requested fields of the GraphQL type Problem.
type GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem struct {
	QuestionId string            `json:"questionId"`
	Title      string            `json:"title"`
	TitleSlug  string            `json:"titleSlug"`
	Difficulty ProblemDifficulty `json:"difficulty"`
}

// GetQuestionId returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.QuestionId, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetQuestionId() string {
	return v.QuestionId
}

// GetTitle returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.Title, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetTitle() string {
	return v.Title
}

// GetTitleSlug returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.TitleSlug, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetTitleSlug() string {
	return v.TitleSlug
}

// GetDifficulty returns GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem.Difficulty, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallengeQuestionProblem) GetDifficulty() ProblemDifficulty {
	return v.Difficulty
}

// GetActiveDailyCodingChallengeResponse is returned by GetActiveDailyCodingChallenge on success.
type GetActiveDailyCodingChallengeResponse struct {
	ActiveDailyCodingChallengeQuestion GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge `json:"activeDailyCodingChallengeQuestion"`
}

// GetActiveDailyCodingChallengeQuestion returns GetActiveDailyCodingChallengeResponse.ActiveDailyCodingChallengeQuestion, and is useful for accessing the field via an interface.
func (v *GetActiveDailyCodingChallengeResponse) GetActiveDailyCodingChallengeQuestion() GetActiveDailyCodingChallengeActiveDailyCodingChallengeQuestionActiveDailyCodingChallenge {
	return v.ActiveDailyCodingChallengeQuestion
}

// GetProblemQuestionProblem includes the requested fields of the GraphQL type Problem.
type GetProblemQuestionProblem struct {
	QuestionId         string                                             `json:"questionId"`
	QuestionFrontendId string                                             `json:"questionFrontendId"`
	BoundTopicId       string                                             `json:"boundTopicId"`
	Title              string                                             `json:"title"`
	TitleSlug          string                                             `json:"titleSlug"`
	Content            string                                             `json:"content"`
	TranslatedTitle    string                                             `json:"translatedTitle"`
	TranslatedContent  string                                             `json:"translatedContent"`
	IsPaidOnly         bool                                               `json:"isPaidOnly"`
	Difficulty         ProblemDifficulty                                  `json:"difficulty"`
	Likes              int                                                `json:"likes"`
	Dislikes           int                                                `json:"dislikes"`
	IsLiked            bool                                               `json:"isLiked"`
	SimilarQuestions   string                                             `json:"similarQuestions"`
	ExampleTestcases   string                                             `json:"exampleTestcases"`
	Contributors       []GetProblemQuestionProblemContributorsContributor `json:"contributors"`
	TopicTags          []GetProblemQuestionProblemTopicTagsTopicTag       `json:"topicTags"`
	CompanyTagStats    string                                             `json:"companyTagStats"`
	CodeSnippets       []GetProblemQuestionProblemCodeSnippetsCodeSnippet `json:"codeSnippets"`
	Stats              string                                             `json:"stats"`
	Hints              []string                                           `json:"hints"`
	Solution           GetProblemQuestionProblemSolutionOfficialSolution  `json:"solution"`
	Status             string                                             `json:"status"`
	SampleTestCase     string                                             `json:"sampleTestCase"`
	MetaData           string                                             `json:"metaData"`
	JudgerAvailable    bool                                               `json:"judgerAvailable"`
	JudgeType          string                                             `json:"judgeType"`
	MysqlSchemas       []string                                           `json:"mysqlSchemas"`
	EnableRunCode      bool                                               `json:"enableRunCode"`
	EnableTestMode     bool                                               `json:"enableTestMode"`
	EnableDebugger     bool                                               `json:"enableDebugger"`
	EnvInfo            string                                             `json:"envInfo"`
	LibraryUrl         string                                             `json:"libraryUrl"`
	AdminUrl           string                                             `json:"adminUrl"`
	ChallengeQuestion  GetProblemQuestionProblemChallengeQuestion         `json:"challengeQuestion"`
	Note               string                                             `json:"note"`
}

// GetQuestionId returns GetProblemQuestionProblem.QuestionId, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetQuestionId() string { return v.QuestionId }

// GetQuestionFrontendId returns GetProblemQuestionProblem.QuestionFrontendId, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetQuestionFrontendId() string { return v.QuestionFrontendId }

// GetBoundTopicId returns GetProblemQuestionProblem.BoundTopicId, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetBoundTopicId() string { return v.BoundTopicId }

// GetTitle returns GetProblemQuestionProblem.Title, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetTitle() string { return v.Title }

// GetTitleSlug returns GetProblemQuestionProblem.TitleSlug, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetTitleSlug() string { return v.TitleSlug }

// GetContent returns GetProblemQuestionProblem.Content, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetContent() string { return v.Content }

// GetTranslatedTitle returns GetProblemQuestionProblem.TranslatedTitle, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetTranslatedTitle() string { return v.TranslatedTitle }

// GetTranslatedContent returns GetProblemQuestionProblem.TranslatedContent, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetTranslatedContent() string { return v.TranslatedContent }

// GetIsPaidOnly returns GetProblemQuestionProblem.IsPaidOnly, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetIsPaidOnly() bool { return v.IsPaidOnly }

// GetDifficulty returns GetProblemQuestionProblem.Difficulty, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetDifficulty() ProblemDifficulty { return v.Difficulty }

// GetLikes returns GetProblemQuestionProblem.Likes, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetLikes() int { return v.Likes }

// GetDislikes returns GetProblemQuestionProblem.Dislikes, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetDislikes() int { return v.Dislikes }

// GetIsLiked returns GetProblemQuestionProblem.IsLiked, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetIsLiked() bool { return v.IsLiked }

// GetSimilarQuestions returns GetProblemQuestionProblem.SimilarQuestions, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetSimilarQuestions() string { return v.SimilarQuestions }

// GetExampleTestcases returns GetProblemQuestionProblem.ExampleTestcases, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetExampleTestcases() string { return v.ExampleTestcases }

// GetContributors returns GetProblemQuestionProblem.Contributors, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetContributors() []GetProblemQuestionProblemContributorsContributor {
	return v.Contributors
}

// GetTopicTags returns GetProblemQuestionProblem.TopicTags, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetTopicTags() []GetProblemQuestionProblemTopicTagsTopicTag {
	return v.TopicTags
}

// GetCompanyTagStats returns GetProblemQuestionProblem.CompanyTagStats, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetCompanyTagStats() string { return v.CompanyTagStats }

// GetCodeSnippets returns GetProblemQuestionProblem.CodeSnippets, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetCodeSnippets() []GetProblemQuestionProblemCodeSnippetsCodeSnippet {
	return v.CodeSnippets
}

// GetStats returns GetProblemQuestionProblem.Stats, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetStats() string { return v.Stats }

// GetHints returns GetProblemQuestionProblem.Hints, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetHints() []string { return v.Hints }

// GetSolution returns GetProblemQuestionProblem.Solution, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetSolution() GetProblemQuestionProblemSolutionOfficialSolution {
	return v.Solution
}

// GetStatus returns GetProblemQuestionProblem.Status, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetStatus() string { return v.Status }

// GetSampleTestCase returns GetProblemQuestionProblem.SampleTestCase, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetSampleTestCase() string { return v.SampleTestCase }

// GetMetaData returns GetProblemQuestionProblem.MetaData, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetMetaData() string { return v.MetaData }

// GetJudgerAvailable returns GetProblemQuestionProblem.JudgerAvailable, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetJudgerAvailable() bool { return v.JudgerAvailable }

// GetJudgeType returns GetProblemQuestionProblem.JudgeType, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetJudgeType() string { return v.JudgeType }

// GetMysqlSchemas returns GetProblemQuestionProblem.MysqlSchemas, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetMysqlSchemas() []string { return v.MysqlSchemas }

// GetEnableRunCode returns GetProblemQuestionProblem.EnableRunCode, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetEnableRunCode() bool { return v.EnableRunCode }

// GetEnableTestMode returns GetProblemQuestionProblem.EnableTestMode, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetEnableTestMode() bool { return v.EnableTestMode }

// GetEnableDebugger returns GetProblemQuestionProblem.EnableDebugger, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetEnableDebugger() bool { return v.EnableDebugger }

// GetEnvInfo returns GetProblemQuestionProblem.EnvInfo, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetEnvInfo() string { return v.EnvInfo }

// GetLibraryUrl returns GetProblemQuestionProblem.LibraryUrl, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetLibraryUrl() string { return v.LibraryUrl }

// GetAdminUrl returns GetProblemQuestionProblem.AdminUrl, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetAdminUrl() string { return v.AdminUrl }

// GetChallengeQuestion returns GetProblemQuestionProblem.ChallengeQuestion, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetChallengeQuestion() GetProblemQuestionProblemChallengeQuestion {
	return v.ChallengeQuestion
}

// GetNote returns GetProblemQuestionProblem.Note, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblem) GetNote() string { return v.Note }

// GetProblemQuestionProblemChallengeQuestion includes the requested fields of the GraphQL type ChallengeQuestion.
type GetProblemQuestionProblemChallengeQuestion struct {
	Id                       string `json:"id"`
	Date                     string `json:"date"`
	IncompleteChallengeCount int    `json:"incompleteChallengeCount"`
	StreakCount              int    `json:"streakCount"`
	Type                     string `json:"type"`
}

// GetId returns GetProblemQuestionProblemChallengeQuestion.Id, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemChallengeQuestion) GetId() string { return v.Id }

// GetDate returns GetProblemQuestionProblemChallengeQuestion.Date, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemChallengeQuestion) GetDate() string { return v.Date }

// GetIncompleteChallengeCount returns GetProblemQuestionProblemChallengeQuestion.IncompleteChallengeCount, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemChallengeQuestion) GetIncompleteChallengeCount() int {
	return v.IncompleteChallengeCount
}

// GetStreakCount returns GetProblemQuestionProblemChallengeQuestion.StreakCount, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemChallengeQuestion) GetStreakCount() int { return v.StreakCount }

// GetType returns GetProblemQuestionProblemChallengeQuestion.Type, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemChallengeQuestion) GetType() string { return v.Type }

// GetProblemQuestionProblemCodeSnippetsCodeSnippet includes the requested fields of the GraphQL type CodeSnippet.
type GetProblemQuestionProblemCodeSnippetsCodeSnippet struct {
	Lang     string `json:"lang"`
	LangSlug string `json:"langSlug"`
	Code     string `json:"code"`
}

// GetLang returns GetProblemQuestionProblemCodeSnippetsCodeSnippet.Lang, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemCodeSnippetsCodeSnippet) GetLang() string { return v.Lang }

// GetLangSlug returns GetProblemQuestionProblemCodeSnippetsCodeSnippet.LangSlug, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemCodeSnippetsCodeSnippet) GetLangSlug() string { return v.LangSlug }

// GetCode returns GetProblemQuestionProblemCodeSnippetsCodeSnippet.Code, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemCodeSnippetsCodeSnippet) GetCode() string { return v.Code }

// GetProblemQuestionProblemContributorsContributor includes the requested fields of the GraphQL type Contributor.
type GetProblemQuestionProblemContributorsContributor struct {
	Username   string `json:"username"`
	ProfileUrl string `json:"profileUrl"`
	AvatarUrl  string `json:"avatarUrl"`
}

// GetUsername returns GetProblemQuestionProblemContributorsContributor.Username, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemContributorsContributor) GetUsername() string { return v.Username }

// GetProfileUrl returns GetProblemQuestionProblemContributorsContributor.ProfileUrl, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemContributorsContributor) GetProfileUrl() string {
	return v.ProfileUrl
}

// GetAvatarUrl returns GetProblemQuestionProblemContributorsContributor.AvatarUrl, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemContributorsContributor) GetAvatarUrl() string { return v.AvatarUrl }

// GetProblemQuestionProblemSolutionOfficialSolution includes the requested fields of the GraphQL type OfficialSolution.
type GetProblemQuestionProblemSolutionOfficialSolution struct {
	Id               string `json:"id"`
	CanSeeDetail     bool   `json:"canSeeDetail"`
	PaidOnly         bool   `json:"paidOnly"`
	HasVideoSolution bool   `json:"hasVideoSolution"`
	PaidOnlyVideo    bool   `json:"paidOnlyVideo"`
}

// GetId returns GetProblemQuestionProblemSolutionOfficialSolution.Id, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemSolutionOfficialSolution) GetId() string { return v.Id }

// GetCanSeeDetail returns GetProblemQuestionProblemSolutionOfficialSolution.CanSeeDetail, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemSolutionOfficialSolution) GetCanSeeDetail() bool {
	return v.CanSeeDetail
}

// GetPaidOnly returns GetProblemQuestionProblemSolutionOfficialSolution.PaidOnly, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemSolutionOfficialSolution) GetPaidOnly() bool { return v.PaidOnly }

// GetHasVideoSolution returns GetProblemQuestionProblemSolutionOfficialSolution.HasVideoSolution, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemSolutionOfficialSolution) GetHasVideoSolution() bool {
	return v.HasVideoSolution
}

// GetPaidOnlyVideo returns GetProblemQuestionProblemSolutionOfficialSolution.PaidOnlyVideo, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemSolutionOfficialSolution) GetPaidOnlyVideo() bool {
	return v.PaidOnlyVideo
}

// GetProblemQuestionProblemTopicTagsTopicTag includes the requested fields of the GraphQL type TopicTag.
type GetProblemQuestionProblemTopicTagsTopicTag struct {
	Name           string `json:"name"`
	Slug           string `json:"slug"`
	TranslatedName string `json:"translatedName"`
}

// GetName returns GetProblemQuestionProblemTopicTagsTopicTag.Name, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemTopicTagsTopicTag) GetName() string { return v.Name }

// GetSlug returns GetProblemQuestionProblemTopicTagsTopicTag.Slug, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemTopicTagsTopicTag) GetSlug() string { return v.Slug }

// GetTranslatedName returns GetProblemQuestionProblemTopicTagsTopicTag.TranslatedName, and is useful for accessing the field via an interface.
func (v *GetProblemQuestionProblemTopicTagsTopicTag) GetTranslatedName() string {
	return v.TranslatedName
}

// GetProblemResponse is returned by GetProblem on success.
type GetProblemResponse struct {
	Question GetProblemQuestionProblem `json:"question"`
}

// GetQuestion returns GetProblemResponse.Question, and is useful for accessing the field via an interface.
func (v *GetProblemResponse) GetQuestion() GetProblemQuestionProblem { return v.Question }

type ProblemDifficulty string

const (
	ProblemDifficultyEasy   ProblemDifficulty = "Easy"
	ProblemDifficultyMedium ProblemDifficulty = "Medium"
	ProblemDifficultyHard   ProblemDifficulty = "Hard"
)

var AllProblemDifficulty = []ProblemDifficulty{
	ProblemDifficultyEasy,
	ProblemDifficultyMedium,
	ProblemDifficultyHard,
}

// __GetProblemInput is used internally by genqlient
type __GetProblemInput struct {
	TitleSlug string `json:"titleSlug"`
}

// GetTitleSlug returns __GetProblemInput.TitleSlug, and is useful for accessing the field via an interface.
func (v *__GetProblemInput) GetTitleSlug() string { return v.TitleSlug }

// The query executed by GetActiveDailyCodingChallenge.
const GetActiveDailyCodingChallenge_Operation = `
query GetActiveDailyCodingChallenge {
	activeDailyCodingChallengeQuestion {
		date
		link
		question {
			questionId
			title
			titleSlug
			difficulty
		}
	}
}
`

func GetActiveDailyCodingChallenge(
	ctx_ context.Context,
	client_ graphql.Client,
) (data_ *GetActiveDailyCodingChallengeResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetActiveDailyCodingChallenge",
		Query:  GetActiveDailyCodingChallenge_Operation,
	}

	data_ = &GetActiveDailyCodingChallengeResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}

// The query executed by GetProblem.
const GetProblem_Operation = `
query GetProblem ($titleSlug: String!) {
	question(titleSlug: $titleSlug) {
		questionId
		questionFrontendId
		boundTopicId
		title
		titleSlug
		content
		translatedTitle
		translatedContent
		isPaidOnly
		difficulty
		likes
		dislikes
		isLiked
		similarQuestions
		exampleTestcases
		contributors {
			username
			profileUrl
			avatarUrl
		}
		topicTags {
			name
			slug
			translatedName
		}
		companyTagStats
		codeSnippets {
			lang
			langSlug
			code
		}
		stats
		hints
		solution {
			id
			canSeeDetail
			paidOnly
			hasVideoSolution
			paidOnlyVideo
		}
		status
		sampleTestCase
		metaData
		judgerAvailable
		judgeType
		mysqlSchemas
		enableRunCode
		enableTestMode
		enableDebugger
		envInfo
		libraryUrl
		adminUrl
		challengeQuestion {
			id
			date
			incompleteChallengeCount
			streakCount
			type
		}
		note
	}
}
`

func GetProblem(
	ctx_ context.Context,
	client_ graphql.Client,
	titleSlug string,
) (data_ *GetProblemResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "GetProblem",
		Query:  GetProblem_Operation,
		Variables: &__GetProblemInput{
			TitleSlug: titleSlug,
		},
	}

	data_ = &GetProblemResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
